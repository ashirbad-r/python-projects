#!/usr/bin/env python3
import requests
from bs4 import BeautifulSoup
import csv
import time
from datetime import datetime
import smtplib
from email import encoders
from email.mime.base import MIMEBase
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText

# --- Configuration ---
URL = "https://finance.yahoo.com/quote/AAPL/"  # Replace with the actual URL to scrape
HEADERS = {'User-Agent': 'Mozilla/5.0'}
SMTP_SERVER = "smtp.gmail.com"
SMTP_PORT = 587
SENDER_EMAIL = "ashirbad.roul2019@gift.edu.in"
SENDER_PASSWORD = "gift2019"
RECIPIENTS = ["bantyroulroul@gmail.com"]

# --- Email Functions ---
def send_email_with_attachment(sender, recipients, subject, body, attachment_path, smtp_server, smtp_port, username, password):
    msg = MIMEMultipart()
    msg["From"] = sender
    msg["To"] = ", ".join(recipients)
    msg["Subject"] = subject
    msg.attach(MIMEText(body, "plain"))
    
    # Attach the CSV file
    try:
        with open(attachment_path, "rb") as attachment:
            part = MIMEBase("application", "octet-stream")
            part.set_payload(attachment.read())
            encoders.encode_base64(part)
            part.add_header("Content-Disposition", f"attachment; filename={attachment_path.split('/')[-1]}")
            msg.attach(part)
    except Exception as e:
        print(f"Error attaching file: {e}")
        return

    # Send email
    try:
        with smtplib.SMTP(smtp_server, smtp_port) as server:
            server.starttls()
            server.login(username, password)
            server.sendmail(sender, recipients, msg.as_string())
            print("Email sent successfully.")
    except Exception as e:
        print(f"Failed to send email: {e}")

# --- Scraping Functions ---
def scrape_page(url, headers):
    try:
        response = requests.get(url, headers=headers, timeout=60)
        response.raise_for_status()  # Check if the request was successful
        soup = BeautifulSoup(response.content, 'lxml')
        return soup
    except requests.exceptions.RequestException as e:
        print(f"Error scraping page: {e}")
        return None

def extract_stock_data(soup):
    data = []
    # Example: Scrape stock price for AAPL from Yahoo Finance
    try:
        stock_price = soup.find('td', {'data-test': 'OPEN-value'}).get_text().strip()
        data.append(['AAPL', stock_price, 'N/A'])  # For simplicity, volume is not scraped here
    except AttributeError as e:
        print("Error extracting stock data:", e)
    return data

def save_to_csv(data):
    today_str = datetime.now().strftime("%Y%m%d")
    filename = f"stock_data_{today_str}.csv"
    try:
        with open(filename, mode='w', newline='', encoding='utf-8') as file:
            writer = csv.writer(file)
            writer.writerow(["Symbol", "Price", "Volume"])
            for row in data:
                writer.writerow(row)
        print(f"Data saved to {filename}")
        return filename
    except Exception as e:
        print(f"Error saving data to CSV: {e}")
        return None

# --- Main Process ---
def main():
    all_data = []
    current_url = URL
    while True:
        soup = scrape_page(current_url, HEADERS)
        if soup:
            page_data = extract_stock_data(soup)
            all_data.extend(page_data)
        # Look for next page link if applicable:
        next_link = soup.find("a", string="Next")
        if next_link and next_link.get("href"):
            current_url = next_link.get("href")
            time.sleep(5)  # Small delay between pages to avoid overwhelming the server
        else:
            break
    
    if all_data:
        csv_filename = save_to_csv(all_data)
        if csv_filename:
            subject = f"Daily Stock Report - {datetime.now().strftime('%Y-%m-%d')}"
            body = "Hello,\n\nPlease find attached today's stock report.\n\nRegards,\nYour Scraping Bot"
            send_email_with_attachment(SENDER_EMAIL, RECIPIENTS, subject, body, csv_filename,
                                       SMTP_SERVER, SMTP_PORT, SENDER_EMAIL, SENDER_PASSWORD)

if __name__ == "__main__":
    main()

